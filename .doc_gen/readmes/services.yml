actions:
  cloudwatch:
  - "[Create an alarm](./cw-ruby-example-create-alarm.rb)"
  - "[Show alarms](./cw-ruby-example-show-alarms.rb)"
  - "[Disable alarm actions](./cw-ruby-example-alarm-actions.rb)"
  cloudtrail: 
  - "[Create a trail](./create_trail.rb)"
  - "[Delete a trail](./delete_trail.rb)"
  - "[Describe trails](./describe_trails.rb)"
  - "[Lookup events](./lookup_events.rb)"
  codebuild:
  - "[Build a project](./aws-ruby-sdk-codebuild-example-build-project.rb)"
  - "[List builds](./aws-ruby-sdk-codebuild-example-list-builds.rb)"
  - "[List projects](./aws-ruby-sdk-codebuild-example-list-projects.rb)"
  dynamodb:
  - "[Create a table](scenario_getting_started_movies.rb)"
  - "[Delete a table](scenario_getting_started_movies.rb)"
  - "[Delete an item from a table](scenario_getting_started_movies.rb)"
  - "[Get an item from a table](scenario_getting_started_movies.rb)"
  - "[Get information about a table](scenario_getting_started_movies.rb)"
  - "[Put an item in a table](scenario_getting_started_movies.rb)"
  - "[Query a table](scenario_getting_started_movies.rb)"
  - "[Scan a table](scenario_getting_started_movies.rb)"
  - "[Update an item in a table](scenario_getting_started_movies.rb)"
  - "[Write a batch of items](scenario_getting_started_movies.rb)"
  ec2:
  - "[Create an instance](./ec2-ruby-example-create-instance.rb)"
  - "[Create a key pair](./ec2-ruby-example-create-key-pair.rb)"
  - "[Create a route table](./ec2-ruby-example-create-route-table.rb)"
  - "[Create a security group](./ec2-ruby-example-create-security-group.rb)"
  - "[Create a subnet](./ec2-ruby-example-create-subnet.rb)"
  - "[Create a VPC](./ec2-ruby-example-create-vpc.rb)"
  - "[Get instance information by tag](./ec2-ruby-example-get-instance-info-by-tag.rb)"
  - "[List state instances](./ec2-ruby-example-list-state-instance-i-123abc.rb)"
  - "[Reboot an instance](./ec2-ruby-example-reboot-instance-i-123abc.rb)"
  - "[Display list of available AWS Regions](./ec2-ruby-example-regions-availability-zones.rb)"
  - "[Start an instance](./ec2-ruby-example-start-instance-i-123abc.rb)"
  - "[Stop an instance](./ec2-ruby-example-stop-instance-i-123abc.rb)"
  - "[Terminate an instance](./ec2-ruby-example-terminate-instance-i-123abc.rb)"
  elasticbeanstalk:
  - "[List stacks](./eb_list_stacks.rb)"
  - "[List all apps](./elb-ruby-example-list-all-apps.rb)"
  - "[List details of an app](./elb-ruby-example-list-name-description-url-myrailsapp.rb)"
  - "[Update an app](./elb-ruby-example-update-myrailsapp.rb)"
  elastictranscoder:
  - "[Create a job](./create_job.rb)"
  - "[Create a job, with SQS notification when complete](./create_job_status_notification.rb)"
  - "[SQS notification (Batch)](./sqs_queue_notification_worker.rb)"
  eventbridge:
  - "[Create and trigger a rule in Amazon CloudWatch Events](./cw-ruby-example-send-events-ec2.rb)"
  iam:
  - "[Attach a policy to a role](scenario_create_user_assume_role.rb)"
  - "[Create a policy](scenario_create_user_assume_role.rb)"
  - "[Create a role](scenario_create_user_assume_role.rb)"
  - "[Create a service-linked role](iam_wrapper.rb)"
  - "[Create a user](scenario_create_user_assume_role.rb)"
  - "[Create an access key](scenario_create_user_assume_role.rb)"
  - "[Create an inline policy for a user](scenario_create_user_assume_role.rb)"
  - "[Delete a policy](scenario_create_user_assume_role.rb)"
  - "[Delete a role](scenario_create_user_assume_role.rb)"
  - "[Delete a service-linked role](iam_wrapper.rb)"
  - "[Delete a user](scenario_create_user_assume_role.rb)"
  - "[Delete an access key](scenario_create_user_assume_role.rb)"
  - "[Delete an inline policy from a user](scenario_create_user_assume_role.rb)"
  - "[Detach a policy from a role](scenario_create_user_assume_role.rb)"
  - "[Get a policy](iam_wrapper.rb)"
  - "[Get a role](iam_wrapper.rb)"
  - "[Get the account password policy](iam_wrapper.rb)"
  - "[List SAML providers](iam_wrapper.rb)"
  - "[List a user's access keys](scenario_create_user_assume_role.rb)"
  - "[List groups](iam_wrapper.rb)"
  - "[List policies](iam_wrapper.rb)"
  - "[List policies attached to a role](scenario_create_user_assume_role.rb)"
  - "[List roles](iam_wrapper.rb)"
  - "[List users](iam_wrapper.rb)"
  kms:
  - "[Create a key](./create_key.rb)"
  - "[Decrypt a blob](./decrypt_data.rb)"
  - "[Encrypt data](./encrypt_data.rb)"
  - "[Re-encrypt data](./re_encrypt_data.rb)"
  lambda:
  - "[Create a function](lambda_basics.rb)"
  - "[Delete a function](lambda_basics.rb)"
  - "[Get a function](lambda_basics.rb)"
  - "[Invoke a function](lambda_basics.rb)"
  - "[List functions](lambda_basics.rb)"
  - "[Update function code](lambda_basics.rb)"
  - "[Update function configuration](lambda_basics.rb)"
  polly:
  - "[Describe voices](./polly_describe_voices.rb)"
  - "[List lexicons](./polly_list_lexicons.rb)"
  - "[Synthesize speech](./polly_synthesize_speech.rb)"
  rds:
  - "[Create a cluster snapshot](./create_cluster_snapshot.rb)"
  - "[Create a snapshot](./create_snapshot.rb)"
  - "[List all instances](./list_instances.rb)"
  - "[List a cluster's snapshots](./list_cluster_snapshots.rb)"
  - "[List instance snapshots](./list_instance_snapshots.rb)"
  - "[List parameter groups](./list_parameter_groups.rb)"
  - "[List subnet groups](./list_security_groups.rb)"
  - "[List security groups](./list_subnet_groups.rb)"
  s3:
  - "[Add CORS rules to a bucket](bucket_cors.rb)"
  - "[Add a policy to a bucket](bucket_policy.rb)"
  - "[Copy an object from one bucket to another](object_copy.rb)"
  - "[Copy an object from one bucket to another and add encryption](object_copy_encrypt.rb)"
  - "[Create a bucket](bucket_create.rb)"
  - "[Delete an empty bucket](scenario_getting_started.rb)"
  - "[Delete CORS rules from a bucket](bucket_cors.rb)"
  - "[Delete a policy from a bucket](bucket_policy.rb)"
  - "[Delete multiple objects](scenario_getting_started.rb)"
  - "[Determine the existence and content type of an object](object_exists.rb)"
  - "[Get an object from a bucket](object_get.rb)"
  - "[Get an object from a bucket and report its server-side encryption state](object_get_encryption.rb)"
  - "[Get CORS rules for a bucket](bucket_cors.rb)"
  - "[Get the policy for a bucket](bucket_policy.rb)"
  - "[List buckets](bucket_list.rb)"
  - "[List objects in a bucket](bucket_list_objects.rb)"
  - "[Set the website configuration for a bucket](bucket_put_website.rb)"
  - "[Set server-side encryption for a bucket](bucket_put_encryption.rb)"
  - "[Upload an object to a bucket using Object.put](object_put.rb)"
  - "[Upload an object to a bucket using Object.put and add server-side encryption](object_put_sse.rb)"
  - "[Upload an object to a bucket using Object.upload_file](object_put.rb)"
  secretsmanager:
  - "[Get all secrets in an AWS Region](./sm_get_secrets.rb)"
  ses:
  - "[Get statistics](./ses_get_statistics.rb)"
  - "[List emails](./ses_list_emails.rb)"
  - "[Send an email](./ses_send_email.rb)"
  - "[Send a verification](./ses_send_verification.rb)"
  sns:
  - "[Create a subscription](./sns-ruby-example-create-subscription.rb)"
  - "[Create a topic](./sns-ruby-example-create-topic.rb)"
  - "[Enable a resource](./sns-ruby-example-enable-resource.rb)"
  - "[Send a message](./sns-ruby-example-send-message.rb)"
  - "[List subscriptions](./sns-ruby-example-show-subscriptions.rb)"
  - "[List topics](./sns-ruby-example-show-topics.rb)"
  sqs:
  - "[Create a queue](./sqs-ruby-example-create-queue.rb)"
  - "[Delete a queue](./sqs-ruby-example-delete-queue.rb)"
  - "[Enable a resource](./sqs-ruby-example-get-messages.rb)"
  - "[Enable long polling](./sqs-ruby-example-enable-long-polling.rb)"
  - "[Get messages](./sqs-ruby-example-get-messages-with-long-polling.rb)"
  - "[Get messages with long-polling](./sqs-ruby-example-long-polling.rb)"
  - "[List queues](./sqs-ruby-example-show-queues.rb)"
  - "[List subscriptions](./sqs-ruby-example-enable-resource.rb)"
  - "[Poll messages](./sqs-ruby-example-poll-messages.rb)"
  - "[Redirect a dead-letter queue](./sqs-ruby-example-redirect-queue-deadletters.rb)"
  - "[Send a batch message](./sqs-ruby-example-send-message-batch.rb)"
  - "[Send a message](./sqs-ruby-example-send-message.rb)"
  - "[Send a message to a queue](./sqs-ruby-example-send-receive-messages.rb)"
  - "[Set time messages not visible after being received](./sqs-ruby-example-message-visibility-timeout.rb)"
  - "[Visibility timeout (example 1)](./sqs-ruby-example-visibility-timeout.rb)"
  - "[Visibility timeout (example 2)](./sqs-ruby-example-visibility-timeout2.rb)"
  workdocs:
  - "[List a user's documents](./wd_list_user_docs.rb)"
  - "[List users](./wd_list_users.rb)"
scenarios:
  cloudwatch:
  - "[Manage alarms](./cw-ruby-example-alarm-basics.rb)"
  - "[Disable alarm actions](./cw-ruby-example-alarm-actions.rb)"
  - "[Add metrics](./cw-ruby-example-metrics-basics.rb)"
  dynamodb:
  - "[Get started using tables, items, and queries](scenario_getting_started_movies.rb)"
  ec2:
  - "[Create an Internet gateway and attach it to a VPC](./ec2-ruby-example-attach-igw-vpc.rb)"
  - "[Manage addresses](./ec2-ruby-example-elastic-ips.rb)"
  - "[Manage key pairs](./ec2-ruby-example-key-pairs.rb)"
  - "[Manage security groups](./ec2-ruby-example-security-group.rb)"
  - "[Manage instances](./ec2-ruby-example-manage-instances.rb)"
  iam:
  - "[Create a user and assume a role](scenario_create_user_assume_role.rb)"
  lambda:
  - "[Get started with functions](scenario_getting_started_functions.rb)"
  s3:
  - "[Create a presigned URL](object_presigned_url_upload.rb)"
  - "[Getting started with buckets and objects](scenario_getting_started.rb)"
  sqs:
  - "[Working with dead letter queues](./sqs-ruby-example-dead-letter-queue.rb)"
  - "[Working with messages](./sqs-ruby-example-send-receive-messages.rb)"
  - "[Working with queues](./sqs-ruby-example-using-queues.rb)"
